{"version":3,"sources":["components/Tile.jsx","components/UI.jsx","components/Board.jsx","index.jsx"],"names":["Tile","clickMe","bind","this","props","clickEvent","status","index","console","log","type","data-index","data-tiletype","onKeyDown","tabIndex","onClick","role","className","React","Component","UI","gameCount","gamesCount","tileTypes","Board","shuffleTiles","selectTile","countGame","disableTile","state","tiles","selectedTiles","multiplier","multTimes","multiplied","i","_","concat","createdBoard","createBoard","shuffle","map","value","setState","allOfTiles","newStatus","allTiles","attribute","firstSelectedTile","currTiles","currentlySelectedTiles","areTilesMatched","currentTiles","changeSelectedTilesStatus","reduce","result","key","length","tempThis","setTimeout","checkForMatch","tileIndex","thisTile","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d57288a3.chunk.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport '../styles.scss';\n\nclass Tile extends React.Component {\n  constructor() {\n    super();\n    this.clickMe = this.clickMe.bind(this);\n  }\n\n  clickMe() {\n    const { clickEvent, status, index } = this.props;\n    // call parent function that manages state\n    if (status === 'unselected') {\n      clickEvent(index);\n    } else {\n      console.log(status);\n    }\n  }\n\n  render() {\n    const { index, type, status } = this.props;\n    return (\n      <div\n        data-index={index}\n        data-tiletype={type}\n        onKeyDown={this.clickMe}\n        tabIndex=\"0\"\n        onClick={this.clickMe}\n        role=\"button\"\n        className={`tile tile--${type} tile--${status}`}\n      >\n        <div className=\"tile-inner\">\n          <div className=\"tile-face tile-front\" />\n          <div className=\"tile-face tile-back\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Tile;\n","import React from 'react';\nimport _ from 'lodash';\nimport '../styles.scss';\n\n\nclass UI extends React.Component {\n  constructor() {\n    super();\n    this.clickMe = this.clickMe.bind(this);\n  }\n\n  clickMe() {\n    // call parent function that manages state\n    const { clickEvent } = this.props;\n    clickEvent(clickEvent);\n  }\n\n  render() {\n    const { gameCount, gamesCount } = this.props;\n    return (\n      <div className={gameCount ? 'ui ui--visible' : 'ui ui--hidden'}>\n        <div className=\"ui-box\">\n          <h1 className=\"ui-title\">Tiles Game</h1>\n          <h3>Match all pairs of colours on the board.</h3>\n          <div className=\"ui-stats\">\n            Score:\n            {' '}\n            <strong className=\"ui-number\">{gamesCount}</strong>\n          </div>\n          <button\n            className=\"ui-shuffle-button\"\n            onClick={this.clickMe}\n            type=\"button\"\n          >\n            Play\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UI;\n","import React from 'react';\nimport _ from 'lodash';\nimport '../styles.scss';\n\nimport Tile from './Tile';\nimport UI from './UI';\n\n// configure the tiles types\nconst tileTypes = [\n  'tyrianpurple',\n  'lightgreen',\n  'greensheen',\n  'independence',\n  'oldburgundy',\n  'azure',\n  'chinapink',\n  'copperred',\n];\n// configure the difficulty\n// by selecting > 2 tilesToMatch\n// -> CSS class \"tiles\" must be \"display: flex\"\nconst numTilesToMatch = 2;\n\nclass Board extends React.Component {\n  constructor() {\n    super();\n    this.shuffleTiles = this.shuffleTiles.bind(this);\n    this.selectTile = this.selectTile.bind(this);\n    this.countGame = this.countGame.bind(this);\n\n    // freeze the selected/matched tile\n    this.disableTile = false;\n\n    this.state = {\n      tiles: [],\n      gamesCount: 0,\n      selectedTiles: [],\n      gameCount: 1,\n    };\n  }\n\n  // setting the board size\n  createBoard(tiles, multiplier) {\n    const multTimes = multiplier - 1;\n    let multiplied = tiles;\n    for (let i = 0; i < multTimes; i++) {\n      multiplied = _.concat(multiplied, tiles);\n    }\n\n    return multiplied;\n  }\n\n  shuffleTiles() {\n    const createdBoard = this.createBoard(tileTypes, numTilesToMatch);\n    const shuffledBoard = _.shuffle(createdBoard);\n\n    // set each tile to unselected\n    const tiles = shuffledBoard.map((value) => ({\n      type: value,\n      status: 'unselected',\n    }));\n\n    this.setState({\n      tiles,\n      gameCount: 0,\n    });\n  }\n\n  changeSelectedTilesStatus(allOfTiles, selectedTiles, newStatus) {\n    const allTiles = allOfTiles;\n    for (const v of selectedTiles) {\n      allTiles[v].status = newStatus;\n    }\n    return allTiles;\n  }\n\n  countGame() {\n    const { gamesCount } = this.state;\n    this.setState({ gamesCount: gamesCount + 1, gameCount: 1 });\n  }\n\n  // checking if all tiles are the same\n  areTilesMatched(allTiles, selectedTiles, attribute) {\n    const firstSelectedTile = allTiles[selectedTiles[0]][attribute];\n\n    for (const v of selectedTiles) {\n      if (allTiles[v][attribute] !== firstSelectedTile) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  checkForMatch(currTiles, currentlySelectedTiles) {\n    // check all selected tiles for match\n    if (this.areTilesMatched(currTiles, currentlySelectedTiles, 'type')) {\n      let currentTiles = currTiles;\n\n      currentTiles = this.changeSelectedTilesStatus(\n        currentTiles,\n        currentlySelectedTiles,\n        'removed',\n      );\n      // test if all tiles are matched\n      const winTest = _.reduce(\n        currentTiles,\n        (result, value, key) => {\n          if (result === value.status) {\n            return result;\n          }\n          return false;\n        },\n        currentTiles[0].status,\n      );\n\n      if (winTest !== false) {\n        this.countGame();\n      }\n    } else {\n      // deselect tiles in case not matched && game is not over\n      let currentTiles = currTiles;\n      currentTiles = this.changeSelectedTilesStatus(\n        currentTiles,\n        currentlySelectedTiles,\n        'unselected',\n      );\n    }\n\n    // change currentTiles\n    return currTiles;\n  }\n\n  selectTile(index) {\n    if (this.disableTile !== true) {\n      const { selectedTiles } = this.state;\n      let currentlySelectedTiles = _.concat(selectedTiles, index);\n      let { tiles } = this.state;\n\n      tiles[\n        currentlySelectedTiles[currentlySelectedTiles.length - 1]\n      ].status = 'selected';\n\n      if (currentlySelectedTiles.length === numTilesToMatch) {\n        this.setState({\n          tiles: tiles,\n        });\n\n        // set timeout for 'this' change\n        const tempThis = this;\n        this.disableTile = true;\n\n        // timeout to reverse incorrect match\n        const pauseGame = setTimeout(() => {\n          tiles = tempThis.checkForMatch(\n            tiles,\n            currentlySelectedTiles,\n          );\n          currentlySelectedTiles = [];\n\n          tempThis.disableTile = false;\n\n          tempThis.setState({\n            selectedTiles: currentlySelectedTiles,\n            tiles: tiles,\n          });\n        }, 500);\n      } else {\n        tiles[currentlySelectedTiles[0]].status = 'selected';\n\n        this.setState({\n          selectedTiles: currentlySelectedTiles,\n          tiles: tiles,\n        });\n      }\n    }\n  }\n\n  render() {\n    const clickEvent = this.selectTile;\n    const { tiles, gameCount, gamesCount } = this.state;\n    let tileIndex = 0;\n    return (\n      <div className=\"tile-board\">\n        <UI\n          gameCount={gameCount}\n          gamesCount={gamesCount}\n          clickEvent={this.shuffleTiles}\n        />\n        <div className=\"tiles\">\n          {tiles.map((thisTile) => (\n            <Tile\n              index={tileIndex++}\n              clickEvent={clickEvent}\n              status={thisTile.status}\n              type={thisTile.type}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// eslint-disable-next-line import/extensions\nimport Board from './components/Board.jsx';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Board />\n  </React.StrictMode>,\n  document.getElementById('app'),\n);\n\n// serviceWorker.unregister();\n"],"sourceRoot":""}